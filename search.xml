<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[实战k-近邻算法]]></title>
    <url>%2F2019%2F08%2F25%2FkNN%2F</url>
    <content type="text"><![CDATA[介绍什么是k-近邻算法 每一个函数的作用及包含的Python语法 记录程序调试和运行结果 一、什么是k-近邻算法计算测试样本与训练样本集中每个实例之间的距离，从小到大排序后取前k个实例，通过查看前k个实例的类别百分比确定测试样本的类别。 优点 精度高，对异常值不敏感，无数据输入假定。{%btn #url,缺点,,title%} 计算复杂度高，空间复杂度高适用范围 数值型、标称型 标称型在有限的数据中取值，例如，bool型（包含True和False）、枚举型 二、代码分析2.1 使用Python导入数据123456from numpy import *import operatordef creatDataSet(): group = array([[1,1],[1,1.1],[0,0],[0,0.1]]) labels = ['A','A','B','B'] return group, labels 引入了两个模块，Numpy便于进行数据处理；operator运算符模块。 2.2 kNN算法伪代码对未知类别属性的数据集中的每个点依次执行： 计算已知类别数据集中的点与当前点之间的距离； 按照距离递增次序排序； 选取与当前点距离最小的k个点； 确定前k个点所在类别的出现频率 返回前k个点出现频率最高的类别作为当前点的预测分类 代码输入：inX – 用于分类的输入向量&emsp;&emsp;dataSet– 输入训练样本集&emsp;&emsp; labels – 输入训练样本类别&emsp;&emsp; k – 选择的最近邻点数 1234567891011121314151617def classify0(inX, dataSet, labels, k): # 计算距离 dataSetSize = dataSet.shape[0] diffMat = tile(inX, (dataSetSize,1)) - dataSet sqDiffMat = diffMat**2 sqDistances = sqDiffMat.sum(axis=1) distances = sqDistances**0.5 # 选择距离最小的k个点 sortedDistIndicies = distances.argsort() # 返回数组值从小到大的索引值 classCount = &#123;&#125; for i in range(k): voteIlabel = labels[sortedDistIndicies[i]] #get的用法 get(key,default) classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1 sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True) return sortedClassCount[0][0] tile()numpy.tile(A, reps): A 为待输入数组，reps决定了A重复的次数。 sum()axis = 0，按列相加；axis = 1，按行相加 argsort()返回数组值从小到大的索引值 dict.get()dict.get(key,default=None) , 返回指定键的值，若值不存在则返回默认值。 dict.items()返回可遍历的元组数组。undefined sorted()sorted(iterable, cmp=None, key=None, reverse=False)iterable – 可迭代对象cmp – 比较函数key – 用来进行比较的元素，只有一个参数，具体的函数的参数应取自可迭代对象中，指定可迭代对象中的一个元素来进行排序reverse – 指定排序规则，reverse=True 降序， reverse=False 升序（默认） operator.itemgetter()用于获取对象指定维的数据。sorted(iterable, key = operator.itemgetter(1)) 即根据对象的第二维进行排序。 2.3 如何测试分类器错误率：分类器给出错误结果的次数/测试执行的总次数常用来评估分类器在某个数据集上的执行效果。 三、实例：使用k-近邻算法改进约会网站的配对效果3.1 将文本数据转换为Numpy的解析程序返回值：&emsp;returnMat – 特征矩阵&emsp;classLabelVector – 类别向量 1234567891011121314def file2matrix(filename): fr = open(filename) arrayOLines = fr.readlines() numberOfLines = len(arrayLines) returnMat = zeros((numberOfLines,3)) classLabelVector = [] index = 0 for line in arrayOLines: line = line.strip() listFromLine = line.split('\t') returnMat[index,:] = listFromLine[0:3] classLabelVector.append(int(listFromLine[-1])) index += 1 return returnMat, classLabelVector 解读open(filenam):打开指定的文件readlines():按行读取文本strip():删除开头和结尾的空格与换行符str.split(str=””,num= :根据指定的分隔符对字符串进行切片，如果参数num有指定值，则分隔num+1个字符串。&emsp;&emsp; str – 分隔符，默认为所有空字符，包含空格、换行（\n）、制表(\t)&emsp;&emsp; num – 分割次数，默认为-1，即分隔所有。]]></content>
      <categories>
        <category>Machine-Learning</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xcode]]></title>
    <url>%2F2019%2F08%2F21%2Fxcode%2F</url>
    <content type="text"><![CDATA[记录使用Xcode过程中遇到的一些坑 一、相对路径问题 配置过程Product —&gt;Scheme —&gt;Edit Scheme —&gt;Options —&gt; Working Directory —&gt;勾选Use custom working directory:并选择工程路径]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Pycharm过程中遇到的问题]]></title>
    <url>%2F2019%2F08%2F21%2Fimge_process%2F</url>
    <content type="text"><![CDATA[记录在使用Pycharm时，遇到的一些问题。 一、解决问题1.1 Pycharm 报错 “No module named…”这里提出一个问题，即如何在Pycharm中使用Anaconda部署Python环境 理解几个概念： Python脚本：即.py文件 Python解释器：python.exe ，不同版本的解释器对语法的要求是不同的 Python运行环境：由解释器的版本和第三方库决定 Anaconda的优点： Anaconda可以很方便地管理第三方库，方便管理； 可以创建不同版本的python开发环境，隔离不同的项目要求。 如何在Pycharm中设置Anaconda环境 配置过程打开Pycharm—&gt; Create New Project—&gt; Project Interpreter—&gt; Existing interpreter—&gt; Interpreter—&gt;&gt; …—&gt; Conda Environment —&gt;&gt; users—&gt; anaconda3 —&gt; bin—&gt; python X.X]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法规则]]></title>
    <url>%2F2019%2F08%2F20%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[Markdown 语法说明 一、标题 使用 # 控制 几个 # 代表几级标题 #与文字之间有空格 二、强调1. 加粗在要加粗的字段两侧添加 **这里加粗强调 2. 斜体在要加斜体的字段两侧添加 *这里需要加斜体强调 3. 加粗斜体在字段两侧添加*这里需要 *加粗并斜体*** 4.删除在要删除的字段两侧添加 ~~这句话需要删除~~ 三、列表1、无序列表1234* 项目1* 项目2 * 项目2.1 * 项目2.2 项目1 项目2 项目2.1 项目2.2 2、有序列表1231. 项目11. 项目21. 项目3 项目1 项目2 项目3 项目3.1 项目3.2 四、添加图片 五、链接 可以直接输入网址http://www.baidu.com 可以为网址重命名 1[name](url) 百度 六、引用123俗话说：&gt; 各扫自家门前雪&gt; 休管他人瓦上霜 俗话说： 各扫自家门前雪休管他人瓦上霜 七、分割线1--- 八、行内代码1`&lt;&gt;` 九、代码块9.1 语法高亮添加使用的代码的语言类别 12import numpy as nplist = ['I','Love','U'] 9.2 显示代码行数在语言类别后添加{.line-numbers} &#123;.line-numbers&#125;12import numpy as nplist = ['I','Love','U'] 十、待办事项12- [ ] 阅读文献- [x] 整理笔记 [ ] 阅读文献[x] 整理笔记 十一、表格 First Header Second Header 00 01 10 11 十二、标注 上标12在上标的两侧添加^30^th^ 30^th 下标12在要下标的两侧添加~H_2O H_2O 、CO_3 脚注1[^1] [^1]: Hi, nice to meet you. 高亮1在需要高亮的字符两侧添加== ==marked== Loremdnadkda jdakjd daksdn]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
